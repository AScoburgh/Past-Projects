<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Bakery Run</title>
  <style>
    body { display: flex; justify-content: center; align-items: center; height: 100vh; background: #ffe4e1; margin: 0; }
    canvas { background: #fff8dc; border: 3px solid #d2691e; border-radius: 12px; }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="400" height="500"></canvas>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    // Game objects
    let player = { x: 50, y: 200, size: 30, gravity: 0.6, lift: -10, velocity: 0 };
    let obstacles = [];
    let frame = 0;
    let score = 0;
    let level = 1;
    let gameOver = false;

    // Draw player (emoji)
    function drawPlayer() {
      ctx.font = player.size + "px Arial";
      ctx.fillText("🧁", player.x, player.y);
    }

    // Draw obstacles
    function drawObstacles() {
      ctx.font = "30px Arial";
      obstacles.forEach(ob => {
        ctx.fillText("🔥", ob.x, ob.y);
      });
    }

    // Update player position
    function updatePlayer() {
      player.velocity += player.gravity;
      player.y += player.velocity;

      if (player.y > canvas.height - player.size) {
        player.y = canvas.height - player.size;
        player.velocity = 0;
        gameOver = true;
      }
      if (player.y < 0) {
        player.y = 0;
        player.velocity = 0;
      }
    }

    // Handle obstacles
    function updateObstacles() {
      if (frame % Math.max(60 - level * 5, 20) === 0) {
        let y = Math.random() * (canvas.height - 30);
        obstacles.push({ x: canvas.width, y: y });
      }
      obstacles.forEach(ob => ob.x -= 3 + level);
      obstacles = obstacles.filter(ob => ob.x > -30);
    }

    // Collision detection
    function checkCollision() {
      obstacles.forEach(ob => {
        if (player.x < ob.x + 20 && player.x + player.size > ob.x && player.y < ob.y + 20 && player.y + player.size > ob.y) {
          gameOver = true;
        }
      });
    }

    // Draw score & level
    function drawScore() {
      ctx.fillStyle = "black";
      ctx.font = "20px Arial";
      ctx.fillText("Score: " + score, 10, 20);
      ctx.fillText("Level: " + level, 300, 20);
    }

    // Main game loop
    function gameLoop() {
      if (gameOver) {
        ctx.fillStyle = "rgba(0,0,0,0.5)";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "white";
        ctx.font = "40px Arial";
        ctx.fillText("Game Over", 100, 250);
        ctx.font = "20px Arial";
        ctx.fillText("Final Score: " + score, 130, 280);
        return;
      }

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawPlayer();
      drawObstacles();
      drawScore();

      updatePlayer();
      updateObstacles();
      checkCollision();

      frame++;
      if (frame % 60 === 0) {
        score++;
        if (score % 10 === 0) level++;
      }

      requestAnimationFrame(gameLoop);
    }

    // Controls
    document.addEventListener("keydown", () => {
      player.velocity = player.lift;
    });

    gameLoop();
    // Citing Use of external help: The Use of ChatGPT Was included in this project in the case of debugging, labeling, and fixing errors
  </script>
</body>
</html>
